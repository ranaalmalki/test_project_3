{"ast":null,"code":"var _jsxFileName = \"/Users/mac/sei/test_project_3/front-end/src/auth/component/AuthenticatedRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom'; // props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\n\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: render,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    })); // if props include a `user` object but no `render` then create route with `Component`\n    // if props do not include a `user` object then redirect to home\n  } else {\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: props => user ? React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }));\n  }\n};\n\nexport default AuthenticatedRoute;","map":{"version":3,"sources":["/Users/mac/sei/test_project_3/front-end/src/auth/component/AuthenticatedRoute.js"],"names":["React","Route","Redirect","AuthenticatedRoute","user","component","Component","render","rest","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC,C,CAEA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AAE1BC,EAAAA,SAAS,EAAEC,SAFe;AAG1BC,EAAAA,MAH0B;AAI1B,KAAGC;AAJuB,CAAD,KAKrB;AACJ;AACA,MAAIJ,IAAI,IAAIG,MAAZ,EAAoB;AAClB,WAAO,oBAAC,KAAD,oBAAWC,IAAX;AAAiB,MAAA,MAAM,EAAED,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP,CADkB,CAGpB;AACA;AACC,GALD,MAKO;AACL,WAAO,oBAAC,KAAD,oBAAWC,IAAX;AAAiB,MAAA,MAAM,EAAEC,KAAK,IACnCL,IAAI,GAAG,oBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,GAA8B,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AAGD;AACF,CAjBD;;AAmBA,eAAeN,kBAAf","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\n// props will include a `user` object or empty object\n// props will include a `component` as `Component` or a `render`\n// all other props that may be passed in are `..rest`\nconst AuthenticatedRoute = ({\n  user,\n  component: Component,\n  render,\n  ...rest\n}) => {\n  // if props include a `user` object and a `render` then create route with `render`\n  if (user && render) {\n    return <Route {...rest} render={render} />\n\n  // if props include a `user` object but no `render` then create route with `Component`\n  // if props do not include a `user` object then redirect to home\n  } else {\n    return <Route {...rest} render={props =>\n      user ? <Component {...props} /> : <Redirect to='/' />\n    } />\n  }\n}\n\nexport default AuthenticatedRoute"]},"metadata":{},"sourceType":"module"}